{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport base from '@stdlib/ndarray-base-shift';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an array containing a read-only truncated view of an input ndarray and a read-only view of the first element(s) along a specified dimension.\n*\n* @param {ndarray} x - input array\n* @param {Object} [options] - function options\n* @param {integer} [options.dim=-1] - dimension along which to perform the operation\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {TypeError} options argument must be an object\n* * @throws {TypeError} must provide valid options\n* @returns {Array<ndarray>} a list of ndarray views\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = shift( x );\n* // returns [ <ndarray>, <ndarray> ]\n*\n* arr = ndarray2array( y[ 0 ] );\n* // returns [ [ 2.0 ], [ 4.0 ], [ 6.0 ] ]\n*\n* arr = ndarray2array( y[ 1 ] );\n* // returns [ [ 1.0 ], [ 3.0 ], [ 5.0 ] ]\n*/\nfunction shift( x ) {\n\tvar options;\n\tvar opts;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null4f', x ) );\n\t}\n\topts = {\n\t\t'dim': -1\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'null2V', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'dim' ) ) {\n\t\t\tif ( !isInteger( options.dim ) ) {\n\t\t\t\tthrow new TypeError( format( 'null8M', 'strict', options.dim ) );\n\t\t\t}\n\t\t\topts.dim = options.dim;\n\t\t}\n\t}\n\treturn base( x, opts.dim, false );\n}\n\n\n// EXPORTS //\n\nexport default shift;\n"],"names":["shift","x","options","opts","isndarrayLike","TypeError","format","dim","arguments","length","isPlainObject","hasOwnProp","isInteger","base"],"mappings":";;skBAoEA,SAASA,EAAOC,GACf,IAAIC,EACAC,EAEJ,IAAMC,EAAeH,GACpB,MAAM,IAAII,UAAWC,EAAQ,SAAUL,IAKxC,GAHAE,EAAO,CACNI,KAAQ,GAEJC,UAAUC,OAAS,EAAI,CAE3B,IAAMC,EADNR,EAAUM,UAAW,IAEpB,MAAM,IAAIH,UAAWC,EAAQ,SAAUJ,IAExC,GAAKS,EAAYT,EAAS,OAAU,CACnC,IAAMU,EAAWV,EAAQK,KACxB,MAAM,IAAIF,UAAWC,EAAQ,SAAU,SAAUJ,EAAQK,MAE1DJ,EAAKI,IAAML,EAAQK,GACnB,CACD,CACD,OAAOM,EAAMZ,EAAGE,EAAKI,KAAK,EAC3B"}