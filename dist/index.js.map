{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar base = require( '@stdlib/ndarray-base-shift' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an array containing a read-only truncated view of an input ndarray and a read-only view of the first element(s) along a specified dimension.\n*\n* @param {ndarray} x - input array\n* @param {Object} [options] - function options\n* @param {integer} [options.dim=-1] - dimension along which to perform the operation\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Array<ndarray>} a list of ndarray views\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = shift( x );\n* // returns [ <ndarray>, <ndarray> ]\n*\n* arr = ndarray2array( y[ 0 ] );\n* // returns [ [ 2.0 ], [ 4.0 ], [ 6.0 ] ]\n*\n* arr = ndarray2array( y[ 1 ] );\n* // returns [ [ 1.0 ], [ 3.0 ], [ 5.0 ] ]\n*/\nfunction shift( x ) {\n\tvar options;\n\tvar opts;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\topts = {\n\t\t'dim': -1\n\t};\n\tif ( arguments.length > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'dim' ) ) {\n\t\t\tif ( !isInteger( options.dim ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be an integer. Option: `%s`.', 'dim', options.dim ) );\n\t\t\t}\n\t\t\topts.dim = options.dim;\n\t\t}\n\t}\n\treturn base( x, opts.dim, false );\n}\n\n\n// EXPORTS //\n\nmodule.exports = shift;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return an array containing a read-only truncated view of an input ndarray and a read-only view of the first element(s) along a specified dimension.\n*\n* @module @stdlib/ndarray-shift\n*\n* @example\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var shift = require( '@stdlib/ndarray-shift' );\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = shift( x );\n* // returns [ <ndarray>, <ndarray> ]\n*\n* arr = ndarray2array( y[ 0 ] );\n* // returns [ [ 2.0 ], [ 4.0 ], [ 6.0 ] ]\n*\n* arr = ndarray2array( y[ 1 ] );\n* // returns [ [ 1.0 ], [ 3.0 ], [ 5.0 ] ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAa,QAAS,iCAAkC,EACxDC,EAAO,QAAS,4BAA6B,EAC7CC,EAAS,QAAS,uBAAwB,EAyC9C,SAASC,EAAOC,EAAI,CACnB,IAAIC,EACAC,EAEJ,GAAK,CAACP,EAAeK,CAAE,EACtB,MAAM,IAAI,UAAWF,EAAQ,oEAAqEE,CAAE,CAAE,EAKvG,GAHAE,EAAO,CACN,IAAO,EACR,EACK,UAAU,OAAS,EAAI,CAE3B,GADAD,EAAU,UAAW,CAAE,EAClB,CAACR,EAAeQ,CAAQ,EAC5B,MAAM,IAAI,UAAWH,EAAQ,qEAAsEG,CAAQ,CAAE,EAE9G,GAAKL,EAAYK,EAAS,KAAM,EAAI,CACnC,GAAK,CAACP,EAAWO,EAAQ,GAAI,EAC5B,MAAM,IAAI,UAAWH,EAAQ,gEAAiE,MAAOG,EAAQ,GAAI,CAAE,EAEpHC,EAAK,IAAMD,EAAQ,GACpB,CACD,CACA,OAAOJ,EAAMG,EAAGE,EAAK,IAAK,EAAM,CACjC,CAKAV,EAAO,QAAUO,IC3CjB,IAAII,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isPlainObject", "isInteger", "isndarrayLike", "hasOwnProp", "base", "format", "shift", "x", "options", "opts", "main"]
}
